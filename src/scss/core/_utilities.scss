@use 'sass:math';
@use '@/scss/core/a11y';

/**
 * Convert px to rem or em. Unitless values are assumed to be in px.
 *
 * @param {Number}  $px        Single value to convert.
 * @param {Boolean} $em        Use `em` units if true.
 * @param {Number}  $base-size Root font size on which to base conversions.
 *
 * @returns {String} A rem or em value.
 */
@function ai-px-to-relative($px, $em, $base-size) {
  @if (0 == $px or 'em' == unit($px) or 'rem' == unit($px)) {
    @return $px;
  }

  $unit: if($em == true, 1em, 1rem);

  @return math.div(ai-strip-units($px), $base-size) * $unit;
}

/**
 * Convert a list of px values (with or without the 'px' string) to either rem or em.
 *
 * @param {Number|List} $values     Single value or list of values to convert.
 * @param {Boolean}     $em         Use `em` units if true.
 * @param {Number}      $base-value Root font size on which to base conversions.
 *
 * @returns {List|Number} A list of values, or a single value.
 */
@function ai-px-to-relative-list($values, $em, $base-value) {
  $relative-values: ();

  @for $i from 1 through length($values) {
    $value: nth($values, $i);

    $rem-value: if(string == type-of($value),
    $value,
    ai-px-to-relative(nth($values, $i), $em, $base-value));

    $relative-values: append($relative-values, $rem-value);
  }

  @return if(
    1 < length($relative-values),
    $relative-values,
    nth($relative-values, 1)
  );
}

/**
 * Convert a list of px values (with or without the 'px' string) to em.
 *
 * @param {List}   $values     Single value or list of values to convert.
 * @param {Number} $base-value Root font size on which to base conversions.
 */
@function em($values, $base-value: 16) {
  @return ai-px-to-relative-list($values, true, $base-value);
}

/**
 * Convert a list of px values (with or without the 'px' string) to rem.
 *
 * @param {List}   $values     Single value or list of values to convert.
 * @param {Number} $base-value Root font size on which to base conversions.
 */
@function rem($values, $base-value: 16) {
  @return ai-px-to-relative-list($values, false, $base-value);
}

/**
 * Strip CSS units from a value.
 *
 * @param {String} $value A CSS length value.
 * @returns {String} A unitless value.
 */
@function ai-strip-units($value) {
  @if (type-of($value) == 'number' and not unitless($value)) {
    @return math.div($value, ($value * 0 + 1));
  }

  @return $value;
}

/**
 * Outputs font properties.
 *
 * @param {Number}        $size                The font-size
 * @param {Number}        $line-height: normal The line-height
 * @param {Number|String} $weight: false       The font-weight, either numerical or a map key
 */
@mixin font-props($size, $line-height: normal, $weight: false) {
  @if (type-of($size) == 'number') {
    font-size: rem($size);
  }

  @if ($weight) {
    font-weight: if(type-of($weight) == 'number',
    $weight,
    ai-get-font-weight($weight));
  }

  line-height: if(type-of($line-height) == 'number',
  (math.div($line-height, $size)),
  $line-height);
}

/**
 * Get a font-weight by key.
 *
 * @param  {String} $weight A map key to match
 * @return {Number}
 */
@function ai-get-font-weight($weight) {
  @if (not map-has-key($font-weights, $weight)) {
    @warn "$font-weights[#{$weight}] doesn't exist.";
    @return map-get($font-weights, regular);
  }

  @return map-get($font-weights, $weight);
}

/**
 * Remove browser default form element styles.
 */
@mixin form-element-reset {
  appearance: none;
  border: 0;
  border-radius: 0;
  font: inherit;
  margin: 0;
}

/**
 * Remove additional browser default input styles.
 */
@mixin input-reset {
  &::-ms-clear {
    display: none;
  }
}

/**
 * Remove additional browser default select styles.
 */
@mixin select-reset {
  &::-ms-expand {
    display: none;
  }
}

/**
 * A Sassy function for negating a number.
 *
 * @param  {Number|String} $value The number or Custom Property to be negated.
 * @return {Number}
 */
@function negate($value) {
  @if (number == type-of($value)) {
    @return ($value * -1);
  }

  // Use calc() for Custom Properties.
  @if (null != str-index($value, 'var(--')) {
    @return calc(#{$value} * -1);
  }

  @return $value;
}

/**
 * Transition one or more CSS properties if the user has no Reduced Motion preference set.
 *
 * Usage: @include transition(opacity, color);
 *
 * @param {string|list} $props The property, or a comma-separated list of properties, to transition.
 */
@mixin transition($props...) {
  $values: ();

  @each $prop in $props {
    $values: append($values, unquote($prop) 150ms ease-in-out);
  }

  @include a11y.respect-reduced-motion {
    transition: zip($values);
  }
}
